# D1 Mini ESP32
#
# 4 Kanal-Dimmer
# * Zero-cross detection an 22
# * Output an 21, 19, 5
#
# Taster an 17 mit Pull-Up
#
# 433 MhZ Empf√§nger an 16
# 
# LED mit MOSFET an
# * 18, 23


substitutions:
  fallback_ap_ssid: "wozilampe"
  mqtt_topic_prefix: licht/wozilampe
  reboot_timeout: 6h

<<: !include .base.yaml

logger:
  baud_rate: 115200
  level: DEBUG


esphome:
  name: wozilampe
  platform: ESP32
  board: wemos_d1_mini32

remote_receiver:
  pin: 16
  dump: rc_switch
  tolerance: 60%
#  filter: 4us
#  idle: 4ms

external_components:
  - source: github://jesserockz/wizmote-esphome
    components:
      - esp_now
      - wizmote

esp_now:

wizmote:
  on_button:
    - logger.log:
        format: "bssid %s, button %i, sequence %i"
        args:
          - !lambda format_hex(data.bssid, 6).c_str()
          - data.button
          - data.sequence
    - if:
        condition:
          lambda: return format_hex(data.bssid, 6).compare("d8a0118091c5") == 0;
        then:
        - if:
            condition:
              lambda: return data.button == 16;
            then:
              light.turn_on:
                id: light1
                brightness: !lambda |-
                  if (id(light1).current_values.get_brightness()<0.2 || !id(light1).current_values.is_on()) return 0.2;
                  if (id(light1).current_values.get_brightness()<0.4) return 0.4;
                  if (id(light1).current_values.get_brightness()<1) return 1;
                  return 0;
        - if:
            condition:
              lambda: return data.button == 17;
            then:
              light.turn_on:
                id: light2
                brightness: !lambda |-
                  if (id(light2).current_values.get_brightness()<0.2 || !id(light2).current_values.is_on()) return 0.2;
                  if (id(light2).current_values.get_brightness()<0.4) return 0.4;
                  if (id(light2).current_values.get_brightness()<1) return 1;
                  return 0;
        - if:
            condition:
              lambda: return data.button == 18;
            then:
              light.turn_on:
                id: light3
                brightness: !lambda |-
                  if (id(light3).current_values.get_brightness()<0.2 || !id(light3).current_values.is_on()) return 0.2;
                  if (id(light3).current_values.get_brightness()<0.4) return 0.4;
                  if (id(light3).current_values.get_brightness()<1) return 1;
                  return 0;
        - if:
            condition:
              lambda: return data.button == 19;
            then:
              lambda: !lambda |-
                float value;
                if (id(light4).current_values.get_brightness()<0.2 || !id(light4).current_values.is_on()) value=0.2;
                else if (id(light4).current_values.get_brightness()<0.4) value=0.4;
                else if (id(light4).current_values.get_brightness()<1) value=1;
                else value=0;

                {
                  auto call = id(light4).turn_on();
                  call.set_brightness(value);
                  call.perform();
                }
                {
                  auto call = id(light5).turn_on();
                  call.set_brightness(value);
                  call.perform();
                }
        - if:
            condition:
              lambda: return data.button == 1;
            then:
            - light.turn_on:
                id: light1
                brightness: 1
            - light.turn_on:
                id: light2
                brightness: 1
            - light.turn_on:
                id: light3
                brightness: 1
        - if:
            condition:
              lambda: return data.button == 2;
            then:
            - light.turn_off:
                id: light1
            - light.turn_off:
                id: light2
            - light.turn_off:
                id: light3
            - light.turn_off:
                id: light4
            - light.turn_off:
                id: light5
        - if:
            condition:
              lambda: return data.button == 3;
            then:
            - light.turn_off:
                id: light1
            - light.turn_off:
                id: light2
            - light.turn_off:
                id: light3
            - light.turn_on:
                id: light4
                brightness: 0.3
            - light.turn_on:
                id: light5
                brightness: 0.3

binary_sensor:
  - platform: remote_receiver
    internal: true
    id: RC_A_ON
    rc_switch_raw:
      code: '010001010000010101010001'
    filters:
      delayed_off: 0.1s
    on_click:
      then:
          light.turn_on:
            id: light1
            brightness: !lambda |-
              if (id(light1).current_values.get_brightness()<0.3 || !id(light1).current_values.is_on()) return 1;
              if (id(light1).current_values.get_brightness()>0.5) return 0.4;
              return 0.2;
            
  - platform: remote_receiver
    internal: true
    id: RC_A_OFF
    rc_switch_raw:
      code: '010001010000010101010100'
    filters:
      delayed_off: 0.1s
    on_click:
      then:
        light.turn_off:
          id: light1

  - platform: remote_receiver
    internal: true
    id: RC_B_ON
    rc_switch_raw:
      code: '010001010001000101010001'
    filters:
      delayed_off: 0.1s
    on_click:
      then:
          light.turn_on:
            id: light2
            brightness: !lambda |-
              if (id(light2).current_values.get_brightness()<0.3 || !id(light2).current_values.is_on()) return 1;
              if (id(light2).current_values.get_brightness()>0.5) return 0.4;
              return 0.2;
            
  - platform: remote_receiver
    internal: true
    id: RC_B_OFF
    rc_switch_raw:
      code: '010001010001000101010100'
    filters:
      delayed_off: 0.1s
    on_click:
      then:
        light.turn_off:
          id: light2

  - platform: remote_receiver
    internal: true
    id: RC_C_ON
    rc_switch_raw:
      code: '010001010001010001010001'
    filters:
      delayed_off: 0.1s
    on_click:
      then:
          light.turn_on:
            id: light3
            brightness: !lambda |-
              if (id(light3).current_values.get_brightness()<0.3 || !id(light3).current_values.is_on()) return 1;
              if (id(light3).current_values.get_brightness()>0.5) return 0.4;
              return 0.2;
            
  - platform: remote_receiver
    internal: true
    id: RC_C_OFF
    rc_switch_raw:
      code: '010001010001010001010100'
    filters:
      delayed_off: 0.1s
    on_click:
      then:
        light.turn_off:
          id: light3


light:
  - platform: monochromatic
    id: light1
    output: output_light1
    restore_mode: ALWAYS_OFF
    name: light1
    gamma_correct: 0
    default_transition_length: 0s
  - platform: monochromatic
    id: light2
    output: output_light2
    restore_mode: ALWAYS_OFF
    name: light2
    gamma_correct: 0
    default_transition_length: 0s
  - platform: monochromatic
    id: light3
    output: output_light3
    restore_mode: ALWAYS_OFF
    name: light3
    gamma_correct: 0
    default_transition_length: 0s
  - platform: monochromatic
    id: light4
    output: output_light4
    restore_mode: ALWAYS_OFF
    name: light4
  - platform: monochromatic
    id: light5
    output: output_light5
    restore_mode: ALWAYS_OFF
    name: light5

output:
  - platform: ac_dimmer
    id: output_light1
    gate_pin: 21
    zero_cross_pin:
      number: 22
      mode: INPUT
      inverted: no
    min_power: 10%
    init_with_half_cycle: false

  - platform: ac_dimmer
    id: output_light2
    gate_pin: 19
    zero_cross_pin:
      number: 22
      mode: INPUT
      inverted: no
    min_power: 10%
    init_with_half_cycle: false

  - platform: ac_dimmer
    id: output_light3
    gate_pin: 5
    zero_cross_pin:
      number: 22
      mode: INPUT
      inverted: no
    min_power: 10%
    init_with_half_cycle: false

  - platform: ledc
    id: output_light4
    pin: 18
    frequency: 1000 Hz

  - platform: ledc
    id: output_light5
    pin: 23
    frequency: 1000 Hz
