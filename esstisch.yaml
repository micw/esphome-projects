# Lichtsteuerung Esstisch Ambiente
# 
# Hardware:
# - 12V Spannungsquelle. Diese muss mit GND am NodeMCU-GND hängen, sonst sterben die MOSFET in Sekunden!
#   12+ an Pluspol der LED-Stripes
# - IRLZ34N MOSFET Pins (von vorne betrachtet von links nach rechts): G D S
#   G: direkt an Digital-Out (D5) des NodeMCU (kein Wiederstand nötig) sowie mit 10k gegen GND
#   D: Liefert die geschaltete Masse der Leuchstreifen. Minuspol der Stripes hier anschließen
#   S: an GND
# - 230V Optokoppler-Isolations-Modul auf 3V3 Logik-Level
#   Taster in der Wand neben dem Tisch schaltet das Ambiente-Licht in 3 Stufen
#   Wenn Taster 60s nicht gedrückt wurde und das Licht an ist, schaltet er immer aus
# - 12->5V Spannungsregler, um den NodeMCU vom LED-Travo mit versorgen zu lassen


substitutions:
  fallback_ap_ssid: "Licht Esstisch"
  mqtt_topic_prefix: licht/esstisch
  reboot_timeout: 24h


<<: !include .base.yaml

esphome:
  name: esstisch
  platform: ESP8266
  board: d1_mini
  esp8266_restore_from_flash: False
  build_path: build/esstisch/

globals:
  - id: last_button_ts
    type: long
    restore_value: no
    initial_value: '0'

binary_sensor:
  - platform: gpio
    name: btn1
    pin: D3
    internal: true
    on_double_click:
      then:
        - light.turn_off:
            id: light1
    on_press:
      then:
        - light.turn_on:
            id: light1
            brightness: !lambda |-
              // if last button press before >60s and light is on, switch it off
              if (id(light1).current_values.is_on() && (id(sntp_time).now().timestamp)-id(last_button_ts)>60) return 0;

              if (id(light1).current_values.get_brightness()<0.2 || !id(light1).current_values.is_on()) return 0.2;
              if (id(light1).current_values.get_brightness()<0.5) return 0.5;
              if (id(light1).current_values.get_brightness()<1) return 1;
              return 0;
        - lambda: |
            ESP_LOGD("custom", "Last button press: %lu, delta: %lu s",id(last_button_ts), id(sntp_time).now().timestamp-id(last_button_ts));
            // store time of last button press
            id(last_button_ts)=id(sntp_time).now().timestamp;

remote_receiver:
  pin: 16
  dump: rc_switch
  tolerance: 60%
#  filter: 4us
#  idle: 4ms

external_components:
  - source: github://jesserockz/wizmote-esphome
    components:
      - esp_now
      - wizmote

esp_now:

wizmote:
  on_button:
    - if:
        condition:
          lambda: return format_hex(data.bssid, 6).compare("d8a0118091c5") == 0;
        then:
        - if:
            condition:
              # heller
              lambda: return data.button == 9;
            then:
              light.turn_on:
                id: light1
                brightness: !lambda |-
                  if (id(light1).current_values.get_brightness()<0.2 || !id(light1).current_values.is_on()) return 0.2;
                  if (id(light1).current_values.get_brightness()<0.4) return 0.4;
                  return 1;
        - if:
            condition:
              # dunkler
              lambda: return data.button == 8;
            then:
              light.turn_on:
                id: light1
                brightness: !lambda |-
                  if (!id(light1).current_values.is_on()) return 0;
                  if (id(light1).current_values.get_brightness()>0.5) return 0.4;
                  if (id(light1).current_values.get_brightness()>0.3) return 0.2;
                  return 0;

light:
  - platform: monochromatic
    id: light1
    output: output_light1
    restore_mode: ALWAYS_OFF
    name: light1

output:
  - platform: esp8266_pwm
    id: output_light1
    pin: D5
    frequency: 1000 Hz
