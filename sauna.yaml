# Sauna - Beleuchtung und Temperaturmessung
# - 12V RGB-LED-Streifen in der Sauna verbaut - am Boden und hinter der Sitzlehne
# - DS18S20 Temperatursensor in Sauna verbaut
# Die LED-Streifen hinter der Sitzbank laufen nach einem Jahr noch problemlos
#
# Wemos D1 Mini
# - Je einen IRLZ34N MOSFET an D5. D6. D7 (RGB für LEDs)
# - DS18S20 an D4
# - Button (12V mit Spannungsteiler) an D2
#
# Der Button schaltet 3 Zustände:
# - Temperaturmodus (bis 40 Grad: blau, bis 65 Grad: gelb, über 65 Grad: rot, Fehler: dunkelgrün)
# - Farbwechselmodus (Sanfte Farbübergänge, 15 Sekunden Übergang, Wechsel jede Minute)
# - Aus


substitutions:
  fallback_ap_ssid: "Sauna"
  mqtt_topic_prefix: sauna

<<: !include .base.yaml 

esphome:
  name: sauna
  platform: ESP8266
  board: d1_mini
  esp8266_restore_from_flash: False

globals:
  - id: saunalicht_state
    type: int
    restore_value: no
    initial_value: '0'  

text_sensor:
  - platform: template
    name: 'Saunalicht Status'
    id: saunalicht
    icon: 'mdi:toggle-switch'
    update_interval: 3600s
    lambda: |-
      switch (id(saunalicht_state)) {
        case 1:
          return {"Temperature"};
        case 2:
          return {"Colors"};
        default:
          return {"Off"};
      }

button:
  - platform: template
    name: "Schalter Saunalicht"
    on_press:
      then:
        lambda: |-
          id(saunalicht_state)=(id(saunalicht_state)+1) % 3;
          id(saunalicht).update();
          auto call = id(saunalicht_led).make_call();
          switch (id(saunalicht_state)) {
            case 1:
              call.set_effect("Temperature");
              call.set_state(true);
              break;
            case 2:
              call.set_effect("Colors");
              call.set_state(true);
              break;
            default:
              call.set_transition_length(1000);
              call.set_state(false);
              break;
          }
          call.perform();

binary_sensor:
  - platform: gpio
    pin:
      number: D2
      mode:
        input: true
        pullup: false
    filters:
      - delayed_on: 10ms
    name: "SaunalichtButton"
    id: saunalicht_button
    internal: true
    on_click:
      min_length: 100ms
      max_length: 2000ms
      then:
        lambda: |-
          id(saunalicht_state)=(id(saunalicht_state)+1) % 3;
          id(saunalicht).update();
          auto call = id(saunalicht_led).make_call();
          switch (id(saunalicht_state)) {
            case 1:
              call.set_state(true);
              call.set_effect("Temperature");
              break;
            case 2:
              call.set_effect("Colors");
              break;
            default:
              call.set_transition_length(1000);
              call.set_state(false);
              break;
          }
          call.perform();

dallas:
  - pin: D4

sensor:
  - platform: dallas
    index: 0
    resolution: 10
    id: temp
    name: "Temperatur"

light:
  - platform: rgb
    internal: true
    restore_mode: ALWAYS_OFF
    name: "Saunalicht"
    id: "saunalicht_led"
    red: output_red
    green: output_green
    blue: output_blue
    effects:
      - lambda:
          name: Temperature
          update_interval: 1s
          lambda: |-
            static int state = 0;
            auto call = id(saunalicht_led).make_call();
            if (initial_run) { // initial off (actually low brightness, off would stop the effect)
              call.set_brightness(0.01);
              call.set_transition_length(0);
              call.perform();
              call.set_brightness(1);
              state = 0;
            }

            float tmp=id(temp).state;

            int new_state;
            if (isnan(tmp)) {
              new_state=-1;
            } else if (tmp<40) {
              new_state = 1; // cold
            } else if (tmp<65) {
              new_state = 2; // warm
            } else {
              new_state = 3;
            }

            if (state==new_state) {
              return;
            }

            state = new_state;

            switch (state) {
              case 1:
                call.set_rgb(0.0, 0.0, 1);
                call.set_brightness(1);
                break;
              case 2:
                call.set_rgb(1.0, 0.7, 0.0);
                call.set_brightness(1);
                break;
              case 3:
                call.set_rgb(1.0, 0.0, 0.0);
                call.set_brightness(1);
                break;
              default:
                call.set_rgb(0.0, 1.0, 0.0);
                call.set_brightness(0.3);
                break;
            }

            call.set_transition_length(1000);
            call.perform();
      - lambda:
          name: Colors
          update_interval: 1s
          lambda: |-
            static int state = 0;
            if (initial_run) {
              state = 0;
            }
            auto call = id(saunalicht_led).make_call();
            if (state == 0) { // initial off (actually low brightness, off would stop the effect)
              call.set_brightness(0.01);
              call.set_transition_length(0);
              call.perform();
              // fast fade-over for initial value
              call.set_brightness(1);
              call.set_transition_length(1000);
              call.set_rgb(0.0, 1.0, 0.0);
              call.perform();
              state=2;
            } 

            call.set_transition_length(15000);
            if (state == 1) {
              call.set_rgb(0.0, 1.0, 0.0);
              call.perform();
            } else if (state == 61) {
              call.set_rgb(0.0, 1.0, 1.0);
              call.perform();
            } else if (state == 121) {
              call.set_rgb(0.0, 0.0, 1.0);
              call.perform();
            } else if (state == 181) {
              call.set_rgb(1.0, 0.0, 1.0);
              call.perform();
            } else if (state == 241) {
              call.set_rgb(1.0, 0.0, 0.0);
              call.perform();
            } else if (state == 301) {
              call.set_rgb(1.0, 1.0, 0.0);
              call.perform();
            }
            state += 1;
            if (state >= 361)
              state = 1;
output:
  - platform: esp8266_pwm
    id: output_green
    pin: D5
  - platform: esp8266_pwm
    id: output_red
    pin: D6
  - platform: esp8266_pwm
    id: output_blue
    pin: D7
